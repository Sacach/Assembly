0x0000:                        | .pos 0x0
0x0000: 30f4001000000   |     irmovl Pino,%esp # pinon alustukset
0x000a: 30f5001000000   |     irmovl Pino,%ebp
0x0014: 30f8c70000000   |     irmovl $199,%e8 #1. siemenluku
0x001e:                        | main:
0x001e: 30fe050000000   |     irmovl $5,%e14      #laskee satunnaislukujen määrän
                               |     
0x0028:                        | kertolasku:
0x0028: 30fb010000000   |     irmovl $1,%e11      #vakio 1
0x0032: 30fa000000000   |     irmovl $0,%e10      #vertailu nolla
0x003c: 30f0000000000   |     irmovl $0,%eax      #%r8 * %r8
0x0046: 30f9010000000   |     irmovl $1,%e9       #vertailubitti
0x0050: 2083            |     rrmovl %e8,%ebx     #rekisterin r8 arvo muistiin, jotta sitä voidaan käyttää
0x0052: 2081            |     rrmovl %e8,%ecx     #laskemiseen muokkaamatta kyseistä arvoa, useampi
0x0054: 2082            |     rrmovl %e8,%edx     #muistipaikka käyttöön, jotta kertolasku voidaan suorittaa
                        | 
0x0056:                 | loop1:
0x0056: 6291                   |     andl %e9,%ecx       #katsotaan onko %r8 arvon binäärimuodossa 1 kohdalla %r9
0x0058: 61a1                   |     subl %e10,%ecx      #jos on niin hypätään summa funktioon
0x005a: 740001000000000000     |     jne summa           #hyppy summa funktioon
0x0063: 6192                   |     subl %e9,%edx       #verrataan onko %rdx:n suurin bitti suurempi kuin %r9 vertailubitti
0x0065: 721101000000000000     |     jl jakolasku        #hyppy jakolasku vaiheeseen
0x006e: 6099                   |     addl %e9,%e9        #siirretään bittivertailijaa yhden bitin verran vasemmalle eli %r9 * 2
0x0070: 6033                   |     addl %ebx,%ebx      #siirretään kertojan bittejä yhden verran vasemmalle eli %rbx * 2
0x0072: 2081                   |     rrmovl %e8,%ecx     #alustetaan %rcx, jotta voidaan tehdä vertailu uudella kierroksella
0x0074: 2082                   |     rrmovl %e8,%edx     #alustetaan %rdx, jotta voidaan tehdä vertailu uudella kierroksella
0x0076: 705600000000000000     |     jmp loop1           #kierros alusta
                               | 
0x007f:                        | .pos 0x100
0x0100:                        | summa:                  #summa funktio
0x0100: 6030                   |     addl %ebx,%eax      #summataan %rax 
0x0102: 2081                   |     rrmovl %e8,%ecx     #alustetaan %rcx, jotta voidaan tehdä vertailu uudella kierroksella
0x0104: 6099                   |     addl %e9,%e9        #siirretään bittivertailijaa yhden bitin verran vasemmalle eli %r9 * 2
0x0106: 6033                   |     addl %ebx,%ebx      #siirretään kertojan bittejä yhden verran vasemmalle eli %rbx * 2
0x0108: 705600000000000000     |     jmp loop1           #palataan looppiin
                               | 
0x0111:                        | jakolasku:
0x0111: 30fc0000000000000000   |     irmovl $0,%e12      #4 keskimmäistä lukua
0x011b: 30f6e803000000000000   |     irmovl $1000,%esi   #vakio 1000 (toistaiseksi)
0x0125: 30f78096980000000000   |     irmovl $10000000,%edi #vakio 10 000 000 (toistaiseksi)
                               | 
0x012f:                        | loop2:
0x012f: 6170                   |     subl %edi,%eax      #nollataan kymmenet miljoonat
0x0131: 762f01000000000000     |     jg loop2            #jos %rax > 10 miljoonaa niin palataan loop2:n alkuun
0x013a: 6070                   |     addl %edi,%eax      #%rax on nyt pienempi kuin 0 joten palautetaan se lukemaan joka se oli ennen kuin siitä vähennettiin viimeisin 10 miljoonaa
0x013c: 30f740420f0000000000   |     irmovl $1000000,%edi #%rdi vakioksi 1 miljoona
0x0146: 704f01000000000000     |     jmp loop3      #hyppy jakolasku2 funktioon
                               |     
0x014f:                        | loop3:
0x014f: 6170                   |     subl %edi,%eax      #nollataan miljoonat
0x0151: 764f01000000000000     |     jg loop3            #jos %rax > 1 miljoona niin palataan jakolasku2:n alkuun
0x015a: 6070                   |     addl %edi,%eax      #%rax on nyt pienempi kuin 0 joten palautetaan se lukemaan joka se oli ennen kuin siitä vähennettiin viimeisin miljoona
0x015c: 30f7a086010000000000   |     irmovl $100000,%edi #%rdi vakioksi 100 000
0x0166: 700003000000000000     |     jmp siirto1         #nyt %rax:stä on "poistettu" kaksi ensimmäistä numeroa joten %rax alkaa nyt sillä luvulla, 
                               |                         #joka tulee olemaan satunnais numeron ensimmäinen luku, hyppy siirto funktioon
                               | 
0x016f:                        | .pos 0x300
0x0300:                        | siirto1:
0x0300: 6170                   |     subl %edi,%eax      #nollataan sadat tuhannet
0x0302: 721603000000000000     |     jl siirto2          #jos %rax < 100 000 niin jatketaan siirtämään seuraava numero oikeaan kohtaan
0x030b: 606c                   |     addl %esi,%e12      #lisätään rekisteriin %r12 1000 jokaista vähennettyä 100 000 kohden (siirretään ensimmäinen satunnaisluvun numero oikealle paikalle)
0x030d: 700003000000000000     |     jmp siirto1         #käydään läpi siirto1 uudelleen kunnes "jl siirto2" menee läpi
                               | 
0x0316:                        | siirto2:
0x0316: 6070                   |     addl %edi,%eax      #%rax < 0, viimeisimmän vertailun takia, joten palautetaan se arvoon, joka se oli ennen vertailua
0x0318: 30f70000000000000000   |     irmovl $0,%edi      #%rdi vakioksi 0
0x0322: 30fd1027000000000000   |     irmovl $10000,%e13  #%r13 vakioksi 10 000
0x032c: 61d0                   |     subl %e13,%eax      #nollataan kymmenet tuhannet
0x032e: 724c03000000000000     |     jl siirto3          #jos %rax < 10 000 niin jatketaan siirtämään seuraava numero oikeaan kohtaan
0x0337: 30f66400000000000000   |     irmovl $100,%esi    #%rsi vakioksi 100
0x0341: 606c                   |     addl %esi,%r12      #lisätään rekisteriin %r12 100 jokaista vähennettyä 10 000 kohden (siirretään toinen satunnaisluvun numero oikealle paikalle)
0x0343: 701603000000000000     |     jmp siirto2         #käydään läpi siirto2 uudelleen kunnes "jl siirto3" menee läpi
                               | 
0x034c:                        | siirto3:
0x034c: 60d0                   |     addl %e13,%eax      #%rax < 0, vertailun takia, joten palautetaan edelliseen arvoon, ennen vertailua
0x034e: 30fd0000000000000000   |     irmovl $0,%e13      #%r13 vakioksi 0
0x0358: 30f7e803000000000000   |     irmovl $1000,%edi   #%rdi vakioksi 1000
0x0362: 6170                   |     subl %edi,%eax      #nollataan tuhannet
0x0364: 728203000000000000     |     jl siirto4          #jos %rax < 1 000 niin jatketaan siirtämään seuraava numero oikeaan kohtaan
0x036d: 30f60a00000000000000   |     irmovl $10,%esi     #%rsi vakioksi 10
0x0377: 606c                   |     addl %esi,%e12      #lisätään rekisteriin %r12 10 jokaista vähennettyä 1 000 kohden (siirretään kolmas satunnaisluvun numero oikealle paikalle)
0x0379: 704c03000000000000     |     jmp siirto3         #käydään läpi siirto3 uudelleen kunnes "jl siirto4" menee läpi
                               | 
0x0382:                        | siirto4:
0x0382: 6070                   |     addl %edi,%eax      #%rax < 0, vertailun takia, joten palautetaan edelliseen arvoon, ennen vertailua
0x0384: 30f70000000000000000   |     irmovl $0,%edi      #%rdi vakioksi 0
0x038e: 30fd6400000000000000   |     irmovl $100,%e13    #%r13 vakioksi 100
0x0398: 61d0                   |     subl %e13,%eax      #nollataan sadat
0x039a: 72ae03000000000000     |     jl rand             #jos %rax < 100 niin jatketaan siirtämään saatu satunnaisluku (%r12) pinoon
0x03a3: 60bc                   |     addl %e11,%e12      #lisätään rekisteriin %r12 1 jokaista vähennettyä 100 kohden (siirretään viimeinen satunnaisluvun numero oikealle paikalle)
0x03a5: 708203000000000000     |     jmp siirto4         #käydään läpi siirto4 uudelleen kunnes "jl rand" menee läpi
                               | 
0x03ae:                        | rand:
0x03ae: a0cf                   |     pushl %e12          #viedään satunnaisluku %r12 pinoon
0x03b0: 20c8                   |     rrmovl %e12,%e8     #alustetaan %r8 saadulla satunnaisluvulla seuraavaa läpikäyntiä varten
0x03b2: 61be                   |     subl %e11,%e14      #haluttiin 5 satunnaislukua, joten joka kerta kun on saatu uusi vähennetään laskurista (%r14) vakio 1
0x03b4: 762800000000000000     |     jg kertolasku       #toistetaan kertolaskusta lähtien kunnes %r14 = 0, jolloin on saatu 5 satunnaislukua
0x03bd: 00                     |     halt                #ohjelman pysäytys
                               | 
0x03be:                        | .pos 0x1000
0x1000:                        | Pino: